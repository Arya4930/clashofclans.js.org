"use strict";(self.webpackChunkclashofclans_js_org=self.webpackChunkclashofclans_js_org||[]).push([[9859],{3905:(e,n,a)=>{a.d(n,{Zo:()=>s,kt:()=>g});var t=a(7294);function r(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function l(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,t)}return a}function o(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?l(Object(a),!0).forEach((function(n){r(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}function i(e,n){if(null==e)return{};var a,t,r=function(e,n){if(null==e)return{};var a,t,r={},l=Object.keys(e);for(t=0;t<l.length;t++)a=l[t],n.indexOf(a)>=0||(r[a]=e[a]);return r}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(t=0;t<l.length;t++)a=l[t],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var c=t.createContext({}),p=function(e){var n=t.useContext(c),a=n;return e&&(a="function"==typeof e?e(n):o(o({},n),e)),a},s=function(e){var n=p(e.components);return t.createElement(c.Provider,{value:n},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},m=t.forwardRef((function(e,n){var a=e.components,r=e.mdxType,l=e.originalType,c=e.parentName,s=i(e,["components","mdxType","originalType","parentName"]),d=p(a),m=r,g=d["".concat(c,".").concat(m)]||d[m]||u[m]||l;return a?t.createElement(g,o(o({ref:n},s),{},{components:a})):t.createElement(g,o({ref:n},s))}));function g(e,n){var a=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var l=a.length,o=new Array(l);o[0]=m;var i={};for(var c in n)hasOwnProperty.call(n,c)&&(i[c]=n[c]);i.originalType=e,i[d]="string"==typeof e?e:r,o[1]=i;for(var p=2;p<l;p++)o[p]=a[p];return t.createElement.apply(null,o)}return t.createElement.apply(null,a)}m.displayName="MDXCreateElement"},2989:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>u,frontMatter:()=>l,metadata:()=>i,toc:()=>p});var t=a(7462),r=(a(7294),a(3905));const l={slug:"/updating-to-v2"},o="Updating to v2",i={unversionedId:"updating-to-v2",id:"updating-to-v2",title:"Updating to v2",description:"This new version is a complete TypeScript rewrite to convert everything from plain (literal JSON {}) objects to class (constructor) objects and support a lot more features.",source:"@site/docs/updating-to-v2.md",sourceDirName:".",slug:"/updating-to-v2",permalink:"/docs/updating-to-v2",draft:!1,editUrl:"https://github.com/clashperk/clashofclans.js.org/edit/master/docs/updating-to-v2.md",tags:[],version:"current",frontMatter:{slug:"/updating-to-v2"},sidebar:"sidebar",previous:{title:"Changelog",permalink:"/docs/changelog"},next:{title:"Achievement",permalink:"/docs/api/classes/Achievement"}},c={},p=[{value:"Methods Renamed",id:"methods-renamed",level:3},{value:"Get Current War",id:"get-current-war",level:3},{value:"Get CWL Group",id:"get-cwl-group",level:3},{value:"Get CWL Round",id:"get-cwl-round",level:3},{value:"Detailed Clan Members",id:"detailed-clan-members",level:3},{value:"Error Handling",id:"error-handling",level:3},{value:"Other Changes",id:"other-changes",level:2},{value:"Properties Renamed",id:"properties-renamed",level:2},{value:"Clan",id:"clan",level:3},{value:"Clan Member",id:"clan-member",level:3},{value:"WarLog, Clan War, CWL Group",id:"warlog-clan-war-cwl-group",level:3},{value:"Player",id:"player",level:3},{value:"Troop",id:"troop",level:3},{value:"Badge and Icon URLs",id:"badge-and-icon-urls",level:3}],s={toc:p},d="wrapper";function u(e){let{components:n,...a}=e;return(0,r.kt)(d,(0,t.Z)({},s,a,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"updating-to-v2"},"Updating to v2"),(0,r.kt)("p",null,"This new version is a complete TypeScript rewrite to convert everything from plain (literal ",(0,r.kt)("inlineCode",{parentName:"p"},"JSON {}"),") objects to class (constructor) objects and support a lot more features."),(0,r.kt)("h3",{id:"methods-renamed"},"Methods Renamed"),(0,r.kt)("p",null,"All of the methods now have ",(0,r.kt)("inlineCode",{parentName:"p"},"get")," added to the front."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-diff"},"- await client.clan();\n+ await client.getClan();\n\n- await client.player();\n+ await client.getPlayer();\n")),(0,r.kt)("h3",{id:"get-current-war"},"Get Current War"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-diff"},"- await client.currentClanWar();\n+ await client.getClanWar();\n\n// or\n\n+ await client.getCurrentWar();\n")),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"The new method ",(0,r.kt)("inlineCode",{parentName:"p"},"client.getCurrentWar()")," returns info about currently running war in the clan for both Regular and CWL Wars.")),(0,r.kt)("h3",{id:"get-cwl-group"},"Get CWL Group"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-diff"},"- await client.clanWarLeague();\n+ await client.getClanWarLeagueGroup();\n")),(0,r.kt)("h3",{id:"get-cwl-round"},"Get CWL Round"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-diff"},"- await client.clanWarLeagueWar();\n+ await client.getClanWarLeagueRound();\n")),(0,r.kt)("h3",{id:"detailed-clan-members"},"Detailed Clan Members"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-diff"},"- const clan = await client.clan('#2PP');\n- await client.detailedClanMembers(clan.memberList);\n\n+ const clan = await client.getClan('#2PP');\n+ await clan.fetchMembers();\n")),(0,r.kt)("h3",{id:"error-handling"},"Error Handling"),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"Additional property ",(0,r.kt)("inlineCode",{parentName:"p"},"data.ok")," has been removed from class based objects. Now use ",(0,r.kt)("inlineCode",{parentName:"p"},"try {} catch {}")," block to handle errors."),(0,r.kt)("blockquote",{parentName:"admonition"},(0,r.kt)("p",{parentName:"blockquote"},"However, ",(0,r.kt)("inlineCode",{parentName:"p"},"data.ok")," is still available for RESTManager, ",(0,r.kt)("a",{parentName:"p",href:"/guide/access-raw-data#easy-access"},"check this guide")," to know more."))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const { HTTPError } = require('clashofclans.js');\n\n(async () => {\n    try {\n        const clan = await client.getClan('#2PP');\n    } catch (error) {\n        if (error instanceof HTTPError && error.status === 404) {\n            console.log('Clan Not Found.');\n        }\n    }\n\n    try {\n        const data = await client.getClanWar('#2PP');\n    } catch (error) {\n        if (error instanceof HTTPError && error.reason === 'notFound') {\n            console.log('Clan Not Found.');\n        }\n        if (error instanceof HTTPError && error.reason === 'notInWar') {\n            console.log('Clan is not in War.');\n        }\n    }\n})();\n")),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"The ",(0,r.kt)("inlineCode",{parentName:"p"},"HTTPError")," class is a custom error class that is thrown when the API returns an error. Also we have customized few other errors that are thrown when the API returns insufficient data, e.g ",(0,r.kt)("inlineCode",{parentName:"p"},"notInWar")," error for ",(0,r.kt)("inlineCode",{parentName:"p"},"Client#getClanWar()")," method."),(0,r.kt)("p",{parentName:"admonition"},"Expected values for ",(0,r.kt)("inlineCode",{parentName:"p"},"HTTPError.reason")," are ",(0,r.kt)("inlineCode",{parentName:"p"},"notFound"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"notInWar"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"accessDenied"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"accessDenied.invalidIp"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"privateWarLog"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"badRequest"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"requestThrottled"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"inMaintenance"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"requestAborted"),", and ",(0,r.kt)("inlineCode",{parentName:"p"},"unknownException"),".")),(0,r.kt)("h2",{id:"other-changes"},"Other Changes"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"To make things simpler ",(0,r.kt)("inlineCode",{parentName:"p"},"client.verifyPlayerToken()")," now returns a boolean value.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Param ",(0,r.kt)("inlineCode",{parentName:"p"},"leagueId")," has been removed where it only accepts Legend League Id (29000022)."))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-diff"},"- client.leagueSeason(leagueId, [options]);\n+ client.getLeagueSeasons([options]);\n\n- client.leagueRanking(leagueId, seasonId, [options])\n+ client.getSeasonRankings(seasonId, [options]);\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"client.init()")," method has been replaced with ",(0,r.kt)("inlineCode",{parentName:"li"},"client.login()"))),(0,r.kt)("h2",{id:"properties-renamed"},"Properties Renamed"),(0,r.kt)("h3",{id:"clan"},"Clan"),(0,r.kt)("p",null,"This includes Clan, Searched Clan, Player Clan, Ranked Clan, War Clan and WarLog Clan."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-diff"},"- clan.members\n+ clan.memberCount\n\n- clan.memberList\n+ clan.members\n\n- clan.clanPoints\n+ clan.points\n\n- clan.clanLevel\n+ clan.level\n\n- clan.clanVersusPoints\n+ clan.versusPoints\n\n- clan.requiredTownhallLevel\n+ clan.requiredTownHallLevel\n")),(0,r.kt)("h3",{id:"clan-member"},"Clan Member"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-diff"},"- member.donationsReceived\n+ member.received\n")),(0,r.kt)("h3",{id:"warlog-clan-war-cwl-group"},"WarLog, Clan War, CWL Group"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Clan / Opponent")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-diff"},"- clan.destructionPercentage\n+ clan.destruction\n\n- clan.attacks\n+ clan.attackCount\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Clan War Member")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-diff"},"- member.townhallLevel\n+ member.townHallLevel\n\n- member.opponentAttacks\n+ member.defenseCount\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Clan War Attack")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-diff"},"- attack.destructionPercentage\n+ attack.destruction\n")),(0,r.kt)("h3",{id:"player"},"Player"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-diff"},"- player.donationsReceived\n+ player.received\n\n- player.warPreference\n+ player.warOptedIn // boolean | null\n")),(0,r.kt)("h3",{id:"troop"},"Troop"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-diff"},"- troop.superTroopIsActive\n+ troop.isActive\n")),(0,r.kt)("h3",{id:"badge-and-icon-urls"},"Badge and Icon URLs"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-diff"},"- *.badgeUrls.*\n+ *.badge.large\n+ *.badge.medium\n+ *.badge.small\n\n- *.iconUrls.*\n+ *.icon.medium\n+ *.icon.small\n+ *.icon.tiny\n")))}u.isMDXComponent=!0}}]);