"use strict";(self.webpackChunkclashofclans_js_org=self.webpackChunkclashofclans_js_org||[]).push([[2547],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var i=r.createContext({}),l=function(e){var t=r.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},p=function(e){var t=l(e.components);return r.createElement(i.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=l(n),f=a,m=u["".concat(i,".").concat(f)]||u[f]||d[f]||o;return n?r.createElement(m,c(c({ref:t},p),{},{components:n})):r.createElement(m,c({ref:t},p))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,c=new Array(o);c[0]=f;var s={};for(var i in t)hasOwnProperty.call(t,i)&&(s[i]=t[i]);s.originalType=e,s[u]="string"==typeof e?e:a,c[1]=s;for(var l=2;l<o;l++)c[l]=n[l];return r.createElement.apply(null,c)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},363:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>c,default:()=>d,frontMatter:()=>o,metadata:()=>s,toc:()=>l});var r=n(7462),a=(n(7294),n(3905));const o={slug:"access-raw-data",title:"Access Raw Data"},c=void 0,s={unversionedId:"access-raw-data",id:"access-raw-data",title:"Access Raw Data",description:"Raw data can be accessed from RESTManager class. Either use Client#rest or construct RESTManager class directly.",source:"@site/guide/access-raw-data.md",sourceDirName:".",slug:"/access-raw-data",permalink:"/guide/access-raw-data",draft:!1,editUrl:"https://github.com/clashperk/clashofclans.js.org/edit/master/guide/access-raw-data.md",tags:[],version:"current",frontMatter:{slug:"access-raw-data",title:"Access Raw Data"},sidebar:"sidebar",previous:{title:"Request Override",permalink:"/guide/request-override"}},i={},l=[],p={toc:l},u="wrapper";function d(e){let{components:t,...n}=e;return(0,a.kt)(u,(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Raw data can be accessed from ",(0,a.kt)("inlineCode",{parentName:"p"},"RESTManager")," class. Either use ",(0,a.kt)("inlineCode",{parentName:"p"},"Client#rest")," or construct ",(0,a.kt)("inlineCode",{parentName:"p"},"RESTManager")," class directly."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"const { Client } = require('clashofclans.js');\nconst client = new Client({ keys: [] });\n\n(async () => {\n    try {\n        const { data } = await client.rest.getClan('#2PP');\n        console.log(data);\n    } catch (error) {\n        if (error instanceof HTTPError && error.status === 404) {\n            console.log('Clan Not Found.');\n        }\n    }\n})();\n")),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("p",{parentName:"admonition"},"Set ",(0,a.kt)("inlineCode",{parentName:"p"},"rejectIfNotValid")," to ",(0,a.kt)("inlineCode",{parentName:"p"},"false")," to handle raw data without ",(0,a.kt)("inlineCode",{parentName:"p"},"try {} catch {}")," block."),(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"const { RESTManager } = require('clashofclans.js');\nconst rest = new RESTManager({ rejectIfNotValid: false, keys: [] });\n\n(async () => {\n    const res = await rest.getClan('#2PP');\n    // { data: APIClan | null; ok: boolean; status: number; maxAge: number; path: string; }\n    if (res.ok) {\n        // code\n    }\n})();\n"))))}d.isMDXComponent=!0}}]);